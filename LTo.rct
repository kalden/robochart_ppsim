package  
LTo import common_functions::*      
interface LTo_Attributes {      
	var new_LTin_binding : boolean = false  
	var new_LTi_binding : boolean = false
	var adhesionExpressed : real = 0
	var chemokineExpressed : real
var LTo_loc : Double2D
var expressingRET : boolean  
	var maxVCAMProbability : real
	var retLigandTime : real
	var maxExpressionReached : boolean
	var adhesionIncrement : real = 0.05
	var chemokineDecrement : real = 0.005
	var chemokineExpressionLimit : real
	var cellDivisionTime : int
	var cell_id : int
	var gridLoc : Int2D 
var entry_state : string = "start"
var lTinContactStateChangeTimePoint : int = - 1
	var lTiContactStateChangeTimePoint : int = - 1
}
robotic platform LTo_Step {
	provides LTo_Attributes provides Operations
} 
controller LTo_Controller {
	requires LTo_Attributes sref
	stm_ref0 = LTo_State_Machine
requires Operations
}
stm LTo_State_Machine {
	requires LTo_Attributes
	const retLigandProbability : real
	initial i0
	state Not_Expressing_RET_Ligand {
		
	entry expressingRET = false
	}
	state Expressing_RET_Ligand {
		
	
	entry expressingRET = true
	}
	probabilistic p0 state Upregulate_Adhesion_Molecules {
		
	
	
	
	
	entry new_LTin_binding = false ; if lTinContactStateChangeTimePoint == - 1 then
		lTinContactStateChangeTimePoint = set_ltin_contact_time ( ) end ; if
		adhesionExpressed < maxVCAMProbability then adhesionExpressed =
		adhesionExpressed + adhesionIncrement end
	}
	state Expressing_Chemokines {
		state Dividing {
			
		
		
		entry divide_cells( gridLoc , adhesionExpressed , chemokineExpressed ,
			maxExpressionReached , 1 , "chemokine")
		}
		state Interphase {
		entry cell_division_clock = cell_division_clock + 1
		}
		initial i0
		transition t0 {
			from i0
			to Interphase
		}
		transition t1 {
			from Interphase
			to Dividing
			trigger
			condition cell_division_clock == cellDivisionTime
		}
		
	
	
	
	
	entry new_LTin_binding = false ; new_LTi_binding = false ; if
		lTiContactStateChangeTimePoint == - 1 then lTiContactStateChangeTimePoint =
		set_ltin_contact_time ( ) end ; if chemokineExpressed >
		chemokineExpressionLimit then chemokineExpressed = chemokineExpressed -
		chemokineDecrement end ; if adhesionExpressed > maxVCAMProbability /\
		chemokineExpressed <= chemokineExpressionLimit then maxExpressionReached =
		true end
	}
	state Mature_LTo {
	initial i0
		state Interphase {
			entry cell_division_clock = cell_division_clock + 1
		}
		state Dividing {
			
		
		entry divide_cells( gridLoc , adhesionExpressed , chemokineExpressed ,
			maxExpressionReached , 1 , "mature")
		}
		transition t0 {
			from i0
			to Interphase
		}
		transition t1 {
			from Interphase
			to Dividing
			trigger
			condition cell_division_clock == cellDivisionTime
		}
	}
	transition t0 {
		from i0
		to p0
		trigger
		condition entry_state == "start"
		action # T ; new_LTin_binding = false ; new_LTi_binding = false ;
			cell_division_clock = 0
	}
	transition t1 {
		from p0
		to Not_Expressing_RET_Ligand
		probability 1 - retLigandProbability
	}
	transition t2 {
		from p0
		to Expressing_RET_Ligand
		probability retLigandProbability
	}
	transition t3 {
		from Upregulate_Adhesion_Molecules
		to Not_Expressing_RET_Ligand
		trigger
		condition since ( T ) > retLigandTime
	}
	transition t4 {
		from Expressing_RET_Ligand
		to Upregulate_Adhesion_Molecules
		trigger
		condition new_LTin_binding == true /\ since ( T ) > 0
		action # T
	}
	transition t5 {
		from Upregulate_Adhesion_Molecules
		to Upregulate_Adhesion_Molecules
		trigger
		condition new_LTin_binding == true /\ since ( T ) > 0
		action # T
	}
	transition t6 {
		from Upregulate_Adhesion_Molecules
		to Expressing_Chemokines
		trigger
		condition new_LTi_binding == true /\ since ( T ) > 0
		action # T
	}
	transition t7 {
		from Expressing_Chemokines
		to Mature_LTo
		trigger
		condition maxExpressionReached == true /\ since ( T ) > 0
		action 
	# T
	}
	transition t8 {
		from Expressing_Chemokines
		to Not_Expressing_RET_Ligand
		trigger
		condition since ( T ) > retLigandTime
	}
	transition t9 {
		from Mature_LTo
		to Not_Expressing_RET_Ligand
		trigger
		condition since ( T ) > retLigandTime
	}
	transition t10 {
		from Expressing_Chemokines
		to Expressing_Chemokines
		trigger
		condition new_LTi_binding == true /\ since ( T ) > 0
		action # T
	}
	transition t11 {
		from Expressing_Chemokines
		to Expressing_Chemokines
		trigger
		condition new_LTin_binding == true /\ since ( T ) > 0
		action # T
	}
	clock T
var cell_division_clock : int = 0
var maxExpressionReached : boolean

	
	requires Operations
	transition t12 {
		from Expressing_Chemokines
		to Expressing_Chemokines
		trigger
		condition new_LTin_binding == false /\ new_LTi_binding == false /\ since ( T )
		> 0
		action # T
	}
	transition t13 {
		from Mature_LTo
		to Mature_LTo
	trigger
		condition since ( T ) > 0
		action # T
	}
	transition t14 {
		from i0
		to Expressing_Chemokines
		trigger
		condition entry_state == "chemokine"
		action # T ; new_LTin_binding = false ; new_LTi_binding = false ;
			cell_division_clock = 0
	}
	transition t15 {
		from i0
		to Mature_LTo
		trigger
		condition entry_state == "mature"
		action # T ; new_LTin_binding = false ; new_LTi_binding = false ;
			cell_division_clock = 0
	}
}
module LTo_Module {
	cref ctrl_ref0 = LTo_Controller
	rref rp_ref0 = LTo_Step
}