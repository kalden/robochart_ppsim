package autogenerated_sim;

import roboCalcAPI.Stages;
import roboCalcAPI.State;
import roboCalcAPI.StateMachine;
import roboCalcAPI.Timer;
import roboCalcAPI.Transition;

public class LTo_State_Machine extends StateMachine
{
	
	// Clocks and variable list:
	public Timer T;
	public LTo_Step R_LTo_Step;
	public LTo_Controller C_LTo_Controller;
public final double retLigandProbability;
public int cell_division_clock;
public boolean maxExpressionReached;
public double pJunctionValue;

// Constructor needs to go here, and check Execute
	
public LTo_State_Machine(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller) 
{
	super("LTo_State_Machine");
	this.R_LTo_Step = R_LTo_Step;  
	this.C_LTo_Controller = C_LTo_Controller;
						
						
		this.retLigandProbability = 0;
		this.cell_division_clock = 0;
		this.maxExpressionReached = false;

	pJunctionValue = Mason_Sim_Main.rng.nextDouble();
	T = new Timer("T");
						
	
	// instantiate states && add substates of machine
	i0 S_LTo_State_Machine_i0 = new i0(R_LTo_Step, C_LTo_Controller, this);
	states.add(S_LTo_State_Machine_i0);
	Not_Expressing_RET_Ligand S_LTo_State_Machine_Not_Expressing_RET_Ligand = new Not_Expressing_RET_Ligand(R_LTo_Step, C_LTo_Controller, this);
	states.add(S_LTo_State_Machine_Not_Expressing_RET_Ligand);
	Expressing_RET_Ligand S_LTo_State_Machine_Expressing_RET_Ligand = new Expressing_RET_Ligand(R_LTo_Step, C_LTo_Controller, this);
	states.add(S_LTo_State_Machine_Expressing_RET_Ligand);
	p0 S_LTo_State_Machine_p0 = new p0(R_LTo_Step, C_LTo_Controller, this);
	states.add(S_LTo_State_Machine_p0);
	Upregulate_Adhesion_Molecules S_LTo_State_Machine_Upregulate_Adhesion_Molecules = new Upregulate_Adhesion_Molecules(R_LTo_Step, C_LTo_Controller, this);
	states.add(S_LTo_State_Machine_Upregulate_Adhesion_Molecules);
	Expressing_Chemokines S_LTo_State_Machine_Expressing_Chemokines = new Expressing_Chemokines(R_LTo_Step, C_LTo_Controller, this);
	states.add(S_LTo_State_Machine_Expressing_Chemokines);
	Mature_LTo S_LTo_State_Machine_Mature_LTo = new Mature_LTo(R_LTo_Step, C_LTo_Controller, this);
	states.add(S_LTo_State_Machine_Mature_LTo);

	t0 S_LTo_State_Machine_t0 = new t0(R_LTo_Step, C_LTo_Controller, this, S_LTo_State_Machine_i0, S_LTo_State_Machine_p0);
	S_LTo_State_Machine_i0.transitions.add(S_LTo_State_Machine_t0);
	t1 S_LTo_State_Machine_t1 = new t1(R_LTo_Step, C_LTo_Controller, this, S_LTo_State_Machine_p0, S_LTo_State_Machine_Not_Expressing_RET_Ligand);
	S_LTo_State_Machine_p0.transitions.add(S_LTo_State_Machine_t1);
	t2 S_LTo_State_Machine_t2 = new t2(R_LTo_Step, C_LTo_Controller, this, S_LTo_State_Machine_p0, S_LTo_State_Machine_Expressing_RET_Ligand);
	S_LTo_State_Machine_p0.transitions.add(S_LTo_State_Machine_t2);
	t3 S_LTo_State_Machine_t3 = new t3(R_LTo_Step, C_LTo_Controller, this, S_LTo_State_Machine_Upregulate_Adhesion_Molecules, S_LTo_State_Machine_Not_Expressing_RET_Ligand);
	S_LTo_State_Machine_Upregulate_Adhesion_Molecules.transitions.add(S_LTo_State_Machine_t3);
	t4 S_LTo_State_Machine_t4 = new t4(R_LTo_Step, C_LTo_Controller, this, S_LTo_State_Machine_Expressing_RET_Ligand, S_LTo_State_Machine_Upregulate_Adhesion_Molecules);
	S_LTo_State_Machine_Expressing_RET_Ligand.transitions.add(S_LTo_State_Machine_t4);
	t5 S_LTo_State_Machine_t5 = new t5(R_LTo_Step, C_LTo_Controller, this, S_LTo_State_Machine_Upregulate_Adhesion_Molecules, S_LTo_State_Machine_Upregulate_Adhesion_Molecules);
	S_LTo_State_Machine_Upregulate_Adhesion_Molecules.transitions.add(S_LTo_State_Machine_t5);
	t6 S_LTo_State_Machine_t6 = new t6(R_LTo_Step, C_LTo_Controller, this, S_LTo_State_Machine_Upregulate_Adhesion_Molecules, S_LTo_State_Machine_Expressing_Chemokines);
	S_LTo_State_Machine_Upregulate_Adhesion_Molecules.transitions.add(S_LTo_State_Machine_t6);
	t7 S_LTo_State_Machine_t7 = new t7(R_LTo_Step, C_LTo_Controller, this, S_LTo_State_Machine_Expressing_Chemokines, S_LTo_State_Machine_Mature_LTo);
	S_LTo_State_Machine_Expressing_Chemokines.transitions.add(S_LTo_State_Machine_t7);
	t8 S_LTo_State_Machine_t8 = new t8(R_LTo_Step, C_LTo_Controller, this, S_LTo_State_Machine_Expressing_Chemokines, S_LTo_State_Machine_Not_Expressing_RET_Ligand);
	S_LTo_State_Machine_Expressing_Chemokines.transitions.add(S_LTo_State_Machine_t8);
	t9 S_LTo_State_Machine_t9 = new t9(R_LTo_Step, C_LTo_Controller, this, S_LTo_State_Machine_Mature_LTo, S_LTo_State_Machine_Not_Expressing_RET_Ligand);
	S_LTo_State_Machine_Mature_LTo.transitions.add(S_LTo_State_Machine_t9);
	t10 S_LTo_State_Machine_t10 = new t10(R_LTo_Step, C_LTo_Controller, this, S_LTo_State_Machine_Expressing_Chemokines, S_LTo_State_Machine_Expressing_Chemokines);
	S_LTo_State_Machine_Expressing_Chemokines.transitions.add(S_LTo_State_Machine_t10);
	t11 S_LTo_State_Machine_t11 = new t11(R_LTo_Step, C_LTo_Controller, this, S_LTo_State_Machine_Expressing_Chemokines, S_LTo_State_Machine_Expressing_Chemokines);
	S_LTo_State_Machine_Expressing_Chemokines.transitions.add(S_LTo_State_Machine_t11);
	t12 S_LTo_State_Machine_t12 = new t12(R_LTo_Step, C_LTo_Controller, this, S_LTo_State_Machine_Expressing_Chemokines, S_LTo_State_Machine_Expressing_Chemokines);
	S_LTo_State_Machine_Expressing_Chemokines.transitions.add(S_LTo_State_Machine_t12);
	t13 S_LTo_State_Machine_t13 = new t13(R_LTo_Step, C_LTo_Controller, this, S_LTo_State_Machine_Mature_LTo, S_LTo_State_Machine_Mature_LTo);
	S_LTo_State_Machine_Mature_LTo.transitions.add(S_LTo_State_Machine_t13);
	t14 S_LTo_State_Machine_t14 = new t14(R_LTo_Step, C_LTo_Controller, this, S_LTo_State_Machine_i0, S_LTo_State_Machine_Expressing_Chemokines);
	S_LTo_State_Machine_i0.transitions.add(S_LTo_State_Machine_t14);
	t15 S_LTo_State_Machine_t15 = new t15(R_LTo_Step, C_LTo_Controller, this, S_LTo_State_Machine_i0, S_LTo_State_Machine_Mature_LTo);
	S_LTo_State_Machine_i0.transitions.add(S_LTo_State_Machine_t15);

	stage = Stages.s_Enter;
						
}
					
					

	
	public int Initial()
	{
		return 0;
	}
	
	public void Execute()
	{
		super.Execute();
		T.IncCounter();
	}
	
	// Now to build the states and any other inner state machines

public class i0 extends State 
{
	private LTo_Step R_LTo_Step;
	private LTo_Controller C_LTo_Controller;
	private LTo_State_Machine S_LTo_State_Machine;
	
	public i0(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine S_LTo_State_Machine)
	{
		super("i0",Stages.s_Inactive);
		this.R_LTo_Step = R_LTo_Step;
		this.C_LTo_Controller = C_LTo_Controller;
		this.S_LTo_State_Machine = S_LTo_State_Machine;
		
	}
	
}
public class Not_Expressing_RET_Ligand extends State 
{
	private LTo_Step R_LTo_Step;
	private LTo_Controller C_LTo_Controller;
	private LTo_State_Machine S_LTo_State_Machine;
	
	public Not_Expressing_RET_Ligand(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine S_LTo_State_Machine)
	{
		super("Not_Expressing_RET_Ligand",Stages.s_Inactive);
		this.R_LTo_Step = R_LTo_Step;
		this.C_LTo_Controller = C_LTo_Controller;
		this.S_LTo_State_Machine = S_LTo_State_Machine;
		
	}
	public void Entry()
	{
		R_LTo_Step.LTo_Step_LTo_Attributes.expressingRET = false;
	}
	
}
public class Expressing_RET_Ligand extends State 
{
	private LTo_Step R_LTo_Step;
	private LTo_Controller C_LTo_Controller;
	private LTo_State_Machine S_LTo_State_Machine;
	
	public Expressing_RET_Ligand(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine S_LTo_State_Machine)
	{
		super("Expressing_RET_Ligand",Stages.s_Inactive);
		this.R_LTo_Step = R_LTo_Step;
		this.C_LTo_Controller = C_LTo_Controller;
		this.S_LTo_State_Machine = S_LTo_State_Machine;
		
	}
	public void Entry()
	{
		R_LTo_Step.LTo_Step_LTo_Attributes.expressingRET = true;
	}
	
}
public class p0 extends State 
{
	private LTo_Step R_LTo_Step;
	private LTo_Controller C_LTo_Controller;
	private LTo_State_Machine S_LTo_State_Machine;
	
	public p0(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine S_LTo_State_Machine)
	{
		super("p0",Stages.s_Inactive);
		this.R_LTo_Step = R_LTo_Step;
		this.C_LTo_Controller = C_LTo_Controller;
		this.S_LTo_State_Machine = S_LTo_State_Machine;
		
	}
	public void Entry() 
	{
		S_LTo_State_Machine.pJunctionValue =  Mason_Sim_Main.rng.nextDouble();
	}
	
}
public class Upregulate_Adhesion_Molecules extends State 
{
	private LTo_Step R_LTo_Step;
	private LTo_Controller C_LTo_Controller;
	private LTo_State_Machine S_LTo_State_Machine;
	
	public Upregulate_Adhesion_Molecules(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine S_LTo_State_Machine)
	{
		super("Upregulate_Adhesion_Molecules",Stages.s_Inactive);
		this.R_LTo_Step = R_LTo_Step;
		this.C_LTo_Controller = C_LTo_Controller;
		this.S_LTo_State_Machine = S_LTo_State_Machine;
		
	}
	public void Entry()
	{
		R_LTo_Step.LTo_Step_LTo_Attributes.new_LTin_binding = false;
		if (R_LTo_Step.LTo_Step_LTo_Attributes.lTinContactStateChangeTimePoint == -1) 
		{
			R_LTo_Step.LTo_Step_LTo_Attributes.lTinContactStateChangeTimePoint = Functions.set_ltin_contact_time();
		}
		if (R_LTo_Step.LTo_Step_LTo_Attributes.adhesionExpressed < R_LTo_Step.LTo_Step_LTo_Attributes.maxVCAMProbability) 
		{
			R_LTo_Step.LTo_Step_LTo_Attributes.adhesionExpressed = R_LTo_Step.LTo_Step_LTo_Attributes.adhesionExpressed + R_LTo_Step.LTo_Step_LTo_Attributes.adhesionIncrement;
		}
	}
	
}
public class Expressing_Chemokines extends State 
{
	private LTo_Step R_LTo_Step;
	private LTo_Controller C_LTo_Controller;
	private LTo_State_Machine S_LTo_State_Machine;
	
	public Expressing_Chemokines(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine S_LTo_State_Machine)
	{
		super("Expressing_Chemokines",Stages.s_Inactive);
		this.R_LTo_Step = R_LTo_Step;
		this.C_LTo_Controller = C_LTo_Controller;
		this.S_LTo_State_Machine = S_LTo_State_Machine;
		
		// instantiate states && add substates of machine
		i0 Expressing_Chemokines_i0 = new i0(R_LTo_Step, C_LTo_Controller, S_LTo_State_Machine);
		states.add(Expressing_Chemokines_i0);
		Dividing Expressing_Chemokines_Dividing = new Dividing(R_LTo_Step, C_LTo_Controller, S_LTo_State_Machine);
		states.add(Expressing_Chemokines_Dividing);
		Interphase Expressing_Chemokines_Interphase = new Interphase(R_LTo_Step, C_LTo_Controller, S_LTo_State_Machine);
		states.add(Expressing_Chemokines_Interphase);
		
		t0 Expressing_Chemokines_t0 = new t0(R_LTo_Step, C_LTo_Controller, S_LTo_State_Machine, Expressing_Chemokines_i0, Expressing_Chemokines_Interphase);
		Expressing_Chemokines_i0.transitions.add(Expressing_Chemokines_t0);
		t1 Expressing_Chemokines_t1 = new t1(R_LTo_Step, C_LTo_Controller, S_LTo_State_Machine, Expressing_Chemokines_Interphase, Expressing_Chemokines_Dividing);
		Expressing_Chemokines_Interphase.transitions.add(Expressing_Chemokines_t1);
	}
	public void Entry()
	{
		R_LTo_Step.LTo_Step_LTo_Attributes.new_LTin_binding = false;
		R_LTo_Step.LTo_Step_LTo_Attributes.new_LTi_binding = false;
		if (R_LTo_Step.LTo_Step_LTo_Attributes.lTiContactStateChangeTimePoint == -1) 
		{
			R_LTo_Step.LTo_Step_LTo_Attributes.lTiContactStateChangeTimePoint = Functions.set_ltin_contact_time();
		}
		if (R_LTo_Step.LTo_Step_LTo_Attributes.chemokineExpressed > R_LTo_Step.LTo_Step_LTo_Attributes.chemokineExpressionLimit) 
		{
			R_LTo_Step.LTo_Step_LTo_Attributes.chemokineExpressed = R_LTo_Step.LTo_Step_LTo_Attributes.chemokineExpressed - R_LTo_Step.LTo_Step_LTo_Attributes.chemokineDecrement;
		}
		if (R_LTo_Step.LTo_Step_LTo_Attributes.adhesionExpressed > R_LTo_Step.LTo_Step_LTo_Attributes.maxVCAMProbability && R_LTo_Step.LTo_Step_LTo_Attributes.chemokineExpressed <= R_LTo_Step.LTo_Step_LTo_Attributes.chemokineExpressionLimit) 
		{
			R_LTo_Step.LTo_Step_LTo_Attributes.maxExpressionReached = true;
		}
	}
	
	public class Dividing extends State 
		{
			private LTo_Step R_LTo_Step;
			private LTo_Controller C_LTo_Controller;
			private LTo_State_Machine S_LTo_State_Machine;
			
			public Dividing(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine S_LTo_State_Machine)
			{
				super("Dividing",Stages.s_Inactive);
				this.R_LTo_Step = R_LTo_Step;
				this.C_LTo_Controller = C_LTo_Controller;
				this.S_LTo_State_Machine = S_LTo_State_Machine;
				
			}
			public void Entry()
			{
				 R_LTo_Step.LTo_Step_Operations.divide_cells(R_LTo_Step.LTo_Step_LTo_Attributes.gridLoc, R_LTo_Step.LTo_Step_LTo_Attributes.adhesionExpressed, R_LTo_Step.LTo_Step_LTo_Attributes.chemokineExpressed, R_LTo_Step.LTo_Step_LTo_Attributes.maxExpressionReached, 1, "chemokine"); 
			}
			
		};
	public class Interphase extends State 
		{
			private LTo_Step R_LTo_Step;
			private LTo_Controller C_LTo_Controller;
			private LTo_State_Machine S_LTo_State_Machine;
			
			public Interphase(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine S_LTo_State_Machine)
			{
				super("Interphase",Stages.s_Inactive);
				this.R_LTo_Step = R_LTo_Step;
				this.C_LTo_Controller = C_LTo_Controller;
				this.S_LTo_State_Machine = S_LTo_State_Machine;
				
			}
			public void Entry()
			{
				S_LTo_State_Machine.cell_division_clock = S_LTo_State_Machine.cell_division_clock + 1;
			}
			
		};
	public class i0 extends State 
		{
			private LTo_Step R_LTo_Step;
			private LTo_Controller C_LTo_Controller;
			private LTo_State_Machine S_LTo_State_Machine;
			
			public i0(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine S_LTo_State_Machine)
			{
				super("i0",Stages.s_Inactive);
				this.R_LTo_Step = R_LTo_Step;
				this.C_LTo_Controller = C_LTo_Controller;
				this.S_LTo_State_Machine = S_LTo_State_Machine;
				
			}
			
		};
		
		public int Initial()
		{
			return 0;
		}
		public void Execute()
		{
			super.Execute();
		}
	public class t1 extends Transition {
			private LTo_Step R_LTo_Step;
			private LTo_Controller C_LTo_Controller;
			private LTo_State_Machine S_LTo_State_Machine;
				
				
			public 	t1(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine 
					S_LTo_State_Machine, State src, State tgt)
			{
				super("S_LTo_State_Machine_Expressing_Chemokines_t1", src, tgt);
				this.R_LTo_Step = R_LTo_Step;
				this.C_LTo_Controller = C_LTo_Controller;
				this.S_LTo_State_Machine = S_LTo_State_Machine;
				
				// KA: May need to check this if we look at events - not 100% sure transferred correctly from C++
			}
					
				public boolean Condition() {
					if (S_LTo_State_Machine.cell_division_clock == R_LTo_Step.LTo_Step_LTo_Attributes.cellDivisionTime) {
						//System.out.println("Condition of transition S_LTo_State_Machine_Expressing_Chemokines_t1 is true");
						return true;
					}
					else {
						System.out.println("Condition of transition S_LTo_State_Machine_Expressing_Chemokines_t1 is false");
						return false;
					}
				}
		};
	public class t0 extends Transition {
			private LTo_Step R_LTo_Step;
			private LTo_Controller C_LTo_Controller;
			private LTo_State_Machine S_LTo_State_Machine;
				
				
			public 	t0(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine 
					S_LTo_State_Machine, State src, State tgt)
			{
				super("S_LTo_State_Machine_Expressing_Chemokines_t0", src, tgt);
				this.R_LTo_Step = R_LTo_Step;
				this.C_LTo_Controller = C_LTo_Controller;
				this.S_LTo_State_Machine = S_LTo_State_Machine;
				
				// KA: May need to check this if we look at events - not 100% sure transferred correctly from C++
			}
					
		};
}
public class Mature_LTo extends State 
{
	private LTo_Step R_LTo_Step;
	private LTo_Controller C_LTo_Controller;
	private LTo_State_Machine S_LTo_State_Machine;
	
	public Mature_LTo(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine S_LTo_State_Machine)
	{
		super("Mature_LTo",Stages.s_Inactive);
		this.R_LTo_Step = R_LTo_Step;
		this.C_LTo_Controller = C_LTo_Controller;
		this.S_LTo_State_Machine = S_LTo_State_Machine;
		
		// instantiate states && add substates of machine
		i0 Mature_LTo_i0 = new i0(R_LTo_Step, C_LTo_Controller, S_LTo_State_Machine);
		states.add(Mature_LTo_i0);
		Interphase Mature_LTo_Interphase = new Interphase(R_LTo_Step, C_LTo_Controller, S_LTo_State_Machine);
		states.add(Mature_LTo_Interphase);
		Dividing Mature_LTo_Dividing = new Dividing(R_LTo_Step, C_LTo_Controller, S_LTo_State_Machine);
		states.add(Mature_LTo_Dividing);
		
		t0 Mature_LTo_t0 = new t0(R_LTo_Step, C_LTo_Controller, S_LTo_State_Machine, Mature_LTo_i0, Mature_LTo_Interphase);
		Mature_LTo_i0.transitions.add(Mature_LTo_t0);
		t1 Mature_LTo_t1 = new t1(R_LTo_Step, C_LTo_Controller, S_LTo_State_Machine, Mature_LTo_Interphase, Mature_LTo_Dividing);
		Mature_LTo_Interphase.transitions.add(Mature_LTo_t1);
	}
	
	public class i0 extends State 
		{
			private LTo_Step R_LTo_Step;
			private LTo_Controller C_LTo_Controller;
			private LTo_State_Machine S_LTo_State_Machine;
			
			public i0(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine S_LTo_State_Machine)
			{
				super("i0",Stages.s_Inactive);
				this.R_LTo_Step = R_LTo_Step;
				this.C_LTo_Controller = C_LTo_Controller;
				this.S_LTo_State_Machine = S_LTo_State_Machine;
				
			}
			
		};
		
		public int Initial()
		{
			return 0;
		}
		public void Execute()
		{
			super.Execute();
		}
	public class Interphase extends State 
		{
			private LTo_Step R_LTo_Step;
			private LTo_Controller C_LTo_Controller;
			private LTo_State_Machine S_LTo_State_Machine;
			
			public Interphase(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine S_LTo_State_Machine)
			{
				super("Interphase",Stages.s_Inactive);
				this.R_LTo_Step = R_LTo_Step;
				this.C_LTo_Controller = C_LTo_Controller;
				this.S_LTo_State_Machine = S_LTo_State_Machine;
				
			}
			public void Entry()
			{
				S_LTo_State_Machine.cell_division_clock = S_LTo_State_Machine.cell_division_clock + 1;
			}
			
		};
	public class Dividing extends State 
		{
			private LTo_Step R_LTo_Step;
			private LTo_Controller C_LTo_Controller;
			private LTo_State_Machine S_LTo_State_Machine;
			
			public Dividing(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine S_LTo_State_Machine)
			{
				super("Dividing",Stages.s_Inactive);
				this.R_LTo_Step = R_LTo_Step;
				this.C_LTo_Controller = C_LTo_Controller;
				this.S_LTo_State_Machine = S_LTo_State_Machine;
				
			}
			public void Entry()
			{
				 R_LTo_Step.LTo_Step_Operations.divide_cells(R_LTo_Step.LTo_Step_LTo_Attributes.gridLoc, R_LTo_Step.LTo_Step_LTo_Attributes.adhesionExpressed, R_LTo_Step.LTo_Step_LTo_Attributes.chemokineExpressed, R_LTo_Step.LTo_Step_LTo_Attributes.maxExpressionReached, 1, "mature"); 
			}
			
		};
	public class t0 extends Transition {
			private LTo_Step R_LTo_Step;
			private LTo_Controller C_LTo_Controller;
			private LTo_State_Machine S_LTo_State_Machine;
				
				
			public 	t0(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine 
					S_LTo_State_Machine, State src, State tgt)
			{
				super("S_LTo_State_Machine_Mature_LTo_t0", src, tgt);
				this.R_LTo_Step = R_LTo_Step;
				this.C_LTo_Controller = C_LTo_Controller;
				this.S_LTo_State_Machine = S_LTo_State_Machine;
				
				// KA: May need to check this if we look at events - not 100% sure transferred correctly from C++
			}
					
		};
	public class t1 extends Transition {
			private LTo_Step R_LTo_Step;
			private LTo_Controller C_LTo_Controller;
			private LTo_State_Machine S_LTo_State_Machine;
				
				
			public 	t1(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine 
					S_LTo_State_Machine, State src, State tgt)
			{
				super("S_LTo_State_Machine_Mature_LTo_t1", src, tgt);
				this.R_LTo_Step = R_LTo_Step;
				this.C_LTo_Controller = C_LTo_Controller;
				this.S_LTo_State_Machine = S_LTo_State_Machine;
				
				// KA: May need to check this if we look at events - not 100% sure transferred correctly from C++
			}
					
				public boolean Condition() {
					if (S_LTo_State_Machine.cell_division_clock == R_LTo_Step.LTo_Step_LTo_Attributes.cellDivisionTime) {
						//System.out.println("Condition of transition S_LTo_State_Machine_Mature_LTo_t1 is true");
						return true;
					}
					else {
						System.out.println("Condition of transition S_LTo_State_Machine_Mature_LTo_t1 is false");
						return false;
					}
				}
		};
}

public class t0 extends Transition {
		private LTo_Step R_LTo_Step;
		private LTo_Controller C_LTo_Controller;
		private LTo_State_Machine S_LTo_State_Machine;
			
			
		public 	t0(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine 
				S_LTo_State_Machine, State src, State tgt)
		{
			super("S_LTo_State_Machine_t0", src, tgt);
			this.R_LTo_Step = R_LTo_Step;
			this.C_LTo_Controller = C_LTo_Controller;
			this.S_LTo_State_Machine = S_LTo_State_Machine;
			
			// KA: May need to check this if we look at events - not 100% sure transferred correctly from C++
		}
				
			public boolean Condition() {
				if (R_LTo_Step.LTo_Step_LTo_Attributes.entry_state == "start") {
					//System.out.println("Condition of transition S_LTo_State_Machine_t0 is true");
					return true;
				}
				else {
					System.out.println("Condition of transition S_LTo_State_Machine_t0 is false");
					return false;
				}
			}
			public void Action() {
				S_LTo_State_Machine.T.SetCounter(0);
				//System.out.println("Resetting Clock T");
				R_LTo_Step.LTo_Step_LTo_Attributes.new_LTin_binding = false;
				R_LTo_Step.LTo_Step_LTo_Attributes.new_LTi_binding = false;
				S_LTo_State_Machine.cell_division_clock = 0;
			}
	};
public class t14 extends Transition {
		private LTo_Step R_LTo_Step;
		private LTo_Controller C_LTo_Controller;
		private LTo_State_Machine S_LTo_State_Machine;
			
			
		public 	t14(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine 
				S_LTo_State_Machine, State src, State tgt)
		{
			super("S_LTo_State_Machine_t14", src, tgt);
			this.R_LTo_Step = R_LTo_Step;
			this.C_LTo_Controller = C_LTo_Controller;
			this.S_LTo_State_Machine = S_LTo_State_Machine;
			
			// KA: May need to check this if we look at events - not 100% sure transferred correctly from C++
		}
				
			public boolean Condition() {
				if (R_LTo_Step.LTo_Step_LTo_Attributes.entry_state == "chemokine") {
					//System.out.println("Condition of transition S_LTo_State_Machine_t14 is true");
					return true;
				}
				else {
					System.out.println("Condition of transition S_LTo_State_Machine_t14 is false");
					return false;
				}
			}
			public void Action() {
				S_LTo_State_Machine.T.SetCounter(0);
				//System.out.println("Resetting Clock T");
				R_LTo_Step.LTo_Step_LTo_Attributes.new_LTin_binding = false;
				R_LTo_Step.LTo_Step_LTo_Attributes.new_LTi_binding = false;
				S_LTo_State_Machine.cell_division_clock = 0;
			}
	};
public class t15 extends Transition {
		private LTo_Step R_LTo_Step;
		private LTo_Controller C_LTo_Controller;
		private LTo_State_Machine S_LTo_State_Machine;
			
			
		public 	t15(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine 
				S_LTo_State_Machine, State src, State tgt)
		{
			super("S_LTo_State_Machine_t15", src, tgt);
			this.R_LTo_Step = R_LTo_Step;
			this.C_LTo_Controller = C_LTo_Controller;
			this.S_LTo_State_Machine = S_LTo_State_Machine;
			
			// KA: May need to check this if we look at events - not 100% sure transferred correctly from C++
		}
				
			public boolean Condition() {
				if (R_LTo_Step.LTo_Step_LTo_Attributes.entry_state == "mature") {
					//System.out.println("Condition of transition S_LTo_State_Machine_t15 is true");
					return true;
				}
				else {
					System.out.println("Condition of transition S_LTo_State_Machine_t15 is false");
					return false;
				}
			}
			public void Action() {
				S_LTo_State_Machine.T.SetCounter(0);
				//System.out.println("Resetting Clock T");
				R_LTo_Step.LTo_Step_LTo_Attributes.new_LTin_binding = false;
				R_LTo_Step.LTo_Step_LTo_Attributes.new_LTi_binding = false;
				S_LTo_State_Machine.cell_division_clock = 0;
			}
	};
public class t4 extends Transition {
		private LTo_Step R_LTo_Step;
		private LTo_Controller C_LTo_Controller;
		private LTo_State_Machine S_LTo_State_Machine;
			
			
		public 	t4(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine 
				S_LTo_State_Machine, State src, State tgt)
		{
			super("S_LTo_State_Machine_t4", src, tgt);
			this.R_LTo_Step = R_LTo_Step;
			this.C_LTo_Controller = C_LTo_Controller;
			this.S_LTo_State_Machine = S_LTo_State_Machine;
			
			// KA: May need to check this if we look at events - not 100% sure transferred correctly from C++
		}
				
			public boolean Condition() {
				if (R_LTo_Step.LTo_Step_LTo_Attributes.new_LTin_binding == true && S_LTo_State_Machine.T.GetCounter() > 0) {
					//System.out.println("Condition of transition S_LTo_State_Machine_t4 is true");
					return true;
				}
				else {
					System.out.println("Condition of transition S_LTo_State_Machine_t4 is false");
					return false;
				}
			}
			public void Action() {
				S_LTo_State_Machine.T.SetCounter(0);
				//System.out.println("Resetting Clock T");
			}
	};
public class t1 extends Transition {
		private LTo_Step R_LTo_Step;
		private LTo_Controller C_LTo_Controller;
		private LTo_State_Machine S_LTo_State_Machine;
		
		public t1(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine S_LTo_State_Machine, State src, State tgt)
		{
			super("S_LTo_State_Machine_t1", src, tgt);
			this.R_LTo_Step = R_LTo_Step;
			this.C_LTo_Controller = C_LTo_Controller;
			this.S_LTo_State_Machine = S_LTo_State_Machine;
		}
		
		public boolean Condition() 
		{
			if (S_LTo_State_Machine.pJunctionValue > (0) && S_LTo_State_Machine.pJunctionValue <= (0 + (1 - S_LTo_State_Machine.retLigandProbability))) {
					//System.out.println("Condition of transition S_LTo_State_Machine_t1 is true");
					return true;
			}
			else {
				//System.out.println("Condition of transition S_LTo_State_Machine_t1 is false");
				return false;
			}
		}
	};

//0 + 1 - S_LTo_State_Machine.retLigandProbability
public class t2 extends Transition {
		private LTo_Step R_LTo_Step;
		private LTo_Controller C_LTo_Controller;
		private LTo_State_Machine S_LTo_State_Machine;
		
		public t2(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine S_LTo_State_Machine, State src, State tgt)
		{
			super("S_LTo_State_Machine_t2", src, tgt);
			this.R_LTo_Step = R_LTo_Step;
			this.C_LTo_Controller = C_LTo_Controller;
			this.S_LTo_State_Machine = S_LTo_State_Machine;
		}
		
		public boolean Condition() 
		{
			if (S_LTo_State_Machine.pJunctionValue > (0 + 1 - S_LTo_State_Machine.retLigandProbability) && S_LTo_State_Machine.pJunctionValue <= (0 + 1 - S_LTo_State_Machine.retLigandProbability + (S_LTo_State_Machine.retLigandProbability))) {
					//System.out.println("Condition of transition S_LTo_State_Machine_t2 is true");
					return true;
			}
			else {
				//System.out.println("Condition of transition S_LTo_State_Machine_t2 is false");
				return false;
			}
		}
	};

//0 + 1 - S_LTo_State_Machine.retLigandProbability + S_LTo_State_Machine.retLigandProbability
//0
public class t3 extends Transition {
		private LTo_Step R_LTo_Step;
		private LTo_Controller C_LTo_Controller;
		private LTo_State_Machine S_LTo_State_Machine;
			
			
		public 	t3(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine 
				S_LTo_State_Machine, State src, State tgt)
		{
			super("S_LTo_State_Machine_t3", src, tgt);
			this.R_LTo_Step = R_LTo_Step;
			this.C_LTo_Controller = C_LTo_Controller;
			this.S_LTo_State_Machine = S_LTo_State_Machine;
			
			// KA: May need to check this if we look at events - not 100% sure transferred correctly from C++
		}
				
			public boolean Condition() {
				if (S_LTo_State_Machine.T.GetCounter() > R_LTo_Step.LTo_Step_LTo_Attributes.retLigandTime) {
					//System.out.println("Condition of transition S_LTo_State_Machine_t3 is true");
					return true;
				}
				else {
					System.out.println("Condition of transition S_LTo_State_Machine_t3 is false");
					return false;
				}
			}
	};
public class t5 extends Transition {
		private LTo_Step R_LTo_Step;
		private LTo_Controller C_LTo_Controller;
		private LTo_State_Machine S_LTo_State_Machine;
			
			
		public 	t5(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine 
				S_LTo_State_Machine, State src, State tgt)
		{
			super("S_LTo_State_Machine_t5", src, tgt);
			this.R_LTo_Step = R_LTo_Step;
			this.C_LTo_Controller = C_LTo_Controller;
			this.S_LTo_State_Machine = S_LTo_State_Machine;
			
			// KA: May need to check this if we look at events - not 100% sure transferred correctly from C++
		}
				
			public boolean Condition() {
				if (R_LTo_Step.LTo_Step_LTo_Attributes.new_LTin_binding == true && S_LTo_State_Machine.T.GetCounter() > 0) {
					//System.out.println("Condition of transition S_LTo_State_Machine_t5 is true");
					return true;
				}
				else {
					System.out.println("Condition of transition S_LTo_State_Machine_t5 is false");
					return false;
				}
			}
			public void Action() {
				S_LTo_State_Machine.T.SetCounter(0);
				//System.out.println("Resetting Clock T");
			}
	};
public class t6 extends Transition {
		private LTo_Step R_LTo_Step;
		private LTo_Controller C_LTo_Controller;
		private LTo_State_Machine S_LTo_State_Machine;
			
			
		public 	t6(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine 
				S_LTo_State_Machine, State src, State tgt)
		{
			super("S_LTo_State_Machine_t6", src, tgt);
			this.R_LTo_Step = R_LTo_Step;
			this.C_LTo_Controller = C_LTo_Controller;
			this.S_LTo_State_Machine = S_LTo_State_Machine;
			
			// KA: May need to check this if we look at events - not 100% sure transferred correctly from C++
		}
				
			public boolean Condition() {
				if (R_LTo_Step.LTo_Step_LTo_Attributes.new_LTi_binding == true && S_LTo_State_Machine.T.GetCounter() > 0) {
					//System.out.println("Condition of transition S_LTo_State_Machine_t6 is true");
					return true;
				}
				else {
					System.out.println("Condition of transition S_LTo_State_Machine_t6 is false");
					return false;
				}
			}
			public void Action() {
				S_LTo_State_Machine.T.SetCounter(0);
				//System.out.println("Resetting Clock T");
			}
	};
public class t7 extends Transition {
		private LTo_Step R_LTo_Step;
		private LTo_Controller C_LTo_Controller;
		private LTo_State_Machine S_LTo_State_Machine;
			
			
		public 	t7(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine 
				S_LTo_State_Machine, State src, State tgt)
		{
			super("S_LTo_State_Machine_t7", src, tgt);
			this.R_LTo_Step = R_LTo_Step;
			this.C_LTo_Controller = C_LTo_Controller;
			this.S_LTo_State_Machine = S_LTo_State_Machine;
			
			// KA: May need to check this if we look at events - not 100% sure transferred correctly from C++
		}
				
			public boolean Condition() {
				if (R_LTo_Step.LTo_Step_LTo_Attributes.maxExpressionReached == true && S_LTo_State_Machine.T.GetCounter() > 0) {
					//System.out.println("Condition of transition S_LTo_State_Machine_t7 is true");
					return true;
				}
				else {
					System.out.println("Condition of transition S_LTo_State_Machine_t7 is false");
					return false;
				}
			}
			public void Action() {
				S_LTo_State_Machine.T.SetCounter(0);
				//System.out.println("Resetting Clock T");
			}
	};
public class t8 extends Transition {
		private LTo_Step R_LTo_Step;
		private LTo_Controller C_LTo_Controller;
		private LTo_State_Machine S_LTo_State_Machine;
			
			
		public 	t8(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine 
				S_LTo_State_Machine, State src, State tgt)
		{
			super("S_LTo_State_Machine_t8", src, tgt);
			this.R_LTo_Step = R_LTo_Step;
			this.C_LTo_Controller = C_LTo_Controller;
			this.S_LTo_State_Machine = S_LTo_State_Machine;
			
			// KA: May need to check this if we look at events - not 100% sure transferred correctly from C++
		}
				
			public boolean Condition() {
				if (S_LTo_State_Machine.T.GetCounter() > R_LTo_Step.LTo_Step_LTo_Attributes.retLigandTime) {
					//System.out.println("Condition of transition S_LTo_State_Machine_t8 is true");
					return true;
				}
				else {
					System.out.println("Condition of transition S_LTo_State_Machine_t8 is false");
					return false;
				}
			}
	};
public class t10 extends Transition {
		private LTo_Step R_LTo_Step;
		private LTo_Controller C_LTo_Controller;
		private LTo_State_Machine S_LTo_State_Machine;
			
			
		public 	t10(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine 
				S_LTo_State_Machine, State src, State tgt)
		{
			super("S_LTo_State_Machine_t10", src, tgt);
			this.R_LTo_Step = R_LTo_Step;
			this.C_LTo_Controller = C_LTo_Controller;
			this.S_LTo_State_Machine = S_LTo_State_Machine;
			
			// KA: May need to check this if we look at events - not 100% sure transferred correctly from C++
		}
				
			public boolean Condition() {
				if (R_LTo_Step.LTo_Step_LTo_Attributes.new_LTi_binding == true && S_LTo_State_Machine.T.GetCounter() > 0) {
					//System.out.println("Condition of transition S_LTo_State_Machine_t10 is true");
					return true;
				}
				else {
					System.out.println("Condition of transition S_LTo_State_Machine_t10 is false");
					return false;
				}
			}
			public void Action() {
				S_LTo_State_Machine.T.SetCounter(0);
				//System.out.println("Resetting Clock T");
			}
	};
public class t11 extends Transition {
		private LTo_Step R_LTo_Step;
		private LTo_Controller C_LTo_Controller;
		private LTo_State_Machine S_LTo_State_Machine;
			
			
		public 	t11(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine 
				S_LTo_State_Machine, State src, State tgt)
		{
			super("S_LTo_State_Machine_t11", src, tgt);
			this.R_LTo_Step = R_LTo_Step;
			this.C_LTo_Controller = C_LTo_Controller;
			this.S_LTo_State_Machine = S_LTo_State_Machine;
			
			// KA: May need to check this if we look at events - not 100% sure transferred correctly from C++
		}
				
			public boolean Condition() {
				if (R_LTo_Step.LTo_Step_LTo_Attributes.new_LTin_binding == true && S_LTo_State_Machine.T.GetCounter() > 0) {
					//System.out.println("Condition of transition S_LTo_State_Machine_t11 is true");
					return true;
				}
				else {
					System.out.println("Condition of transition S_LTo_State_Machine_t11 is false");
					return false;
				}
			}
			public void Action() {
				S_LTo_State_Machine.T.SetCounter(0);
				//System.out.println("Resetting Clock T");
			}
	};
public class t12 extends Transition {
		private LTo_Step R_LTo_Step;
		private LTo_Controller C_LTo_Controller;
		private LTo_State_Machine S_LTo_State_Machine;
			
			
		public 	t12(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine 
				S_LTo_State_Machine, State src, State tgt)
		{
			super("S_LTo_State_Machine_t12", src, tgt);
			this.R_LTo_Step = R_LTo_Step;
			this.C_LTo_Controller = C_LTo_Controller;
			this.S_LTo_State_Machine = S_LTo_State_Machine;
			
			// KA: May need to check this if we look at events - not 100% sure transferred correctly from C++
		}
				
			public boolean Condition() {
				if (R_LTo_Step.LTo_Step_LTo_Attributes.new_LTin_binding == false && R_LTo_Step.LTo_Step_LTo_Attributes.new_LTi_binding == false && S_LTo_State_Machine.T.GetCounter() > 0) {
					//System.out.println("Condition of transition S_LTo_State_Machine_t12 is true");
					return true;
				}
				else {
					System.out.println("Condition of transition S_LTo_State_Machine_t12 is false");
					return false;
				}
			}
			public void Action() {
				S_LTo_State_Machine.T.SetCounter(0);
				//System.out.println("Resetting Clock T");
			}
	};
public class t9 extends Transition {
		private LTo_Step R_LTo_Step;
		private LTo_Controller C_LTo_Controller;
		private LTo_State_Machine S_LTo_State_Machine;
			
			
		public 	t9(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine 
				S_LTo_State_Machine, State src, State tgt)
		{
			super("S_LTo_State_Machine_t9", src, tgt);
			this.R_LTo_Step = R_LTo_Step;
			this.C_LTo_Controller = C_LTo_Controller;
			this.S_LTo_State_Machine = S_LTo_State_Machine;
			
			// KA: May need to check this if we look at events - not 100% sure transferred correctly from C++
		}
				
			public boolean Condition() {
				if (S_LTo_State_Machine.T.GetCounter() > R_LTo_Step.LTo_Step_LTo_Attributes.retLigandTime) {
					//System.out.println("Condition of transition S_LTo_State_Machine_t9 is true");
					return true;
				}
				else {
					System.out.println("Condition of transition S_LTo_State_Machine_t9 is false");
					return false;
				}
			}
	};
public class t13 extends Transition {
		private LTo_Step R_LTo_Step;
		private LTo_Controller C_LTo_Controller;
		private LTo_State_Machine S_LTo_State_Machine;
			
			
		public 	t13(LTo_Step R_LTo_Step, LTo_Controller C_LTo_Controller, LTo_State_Machine 
				S_LTo_State_Machine, State src, State tgt)
		{
			super("S_LTo_State_Machine_t13", src, tgt);
			this.R_LTo_Step = R_LTo_Step;
			this.C_LTo_Controller = C_LTo_Controller;
			this.S_LTo_State_Machine = S_LTo_State_Machine;
			
			// KA: May need to check this if we look at events - not 100% sure transferred correctly from C++
		}
				
			public boolean Condition() {
				if (S_LTo_State_Machine.T.GetCounter() > 0) {
					//System.out.println("Condition of transition S_LTo_State_Machine_t13 is true");
					return true;
				}
				else {
					System.out.println("Condition of transition S_LTo_State_Machine_t13 is false");
					return false;
				}
			}
			public void Action() {
				S_LTo_State_Machine.T.SetCounter(0);
				//System.out.println("Resetting Clock T");
			}
	};
	
	}
